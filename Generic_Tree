#include <iostream>
#include <queue>
#include <vector>
#include <climits>
using namespace std;

template <typename T>
class TreeNode {
   public:
    T data;
    vector<TreeNode<T>*> children;

    TreeNode(T data) { this->data = data; }

    ~TreeNode() {
        for (int i = 0; i < children.size(); i++) {
            delete children[i];
        }
    }
};

TreeNode<int>* takeInputLevelWise() {
    int rootData;
    cin >> rootData;
    TreeNode<int>* root = new TreeNode<int>(rootData);

    queue<TreeNode<int>*> pendingNodes;

    pendingNodes.push(root);
    while (pendingNodes.size() != 0) {
        TreeNode<int>* front = pendingNodes.front();
        pendingNodes.pop();
        int numChild;
        cin >> numChild;
        for (int i = 0; i < numChild; i++) {
            int childData;
            cin >> childData;
            TreeNode<int>* child = new TreeNode<int>(childData);
            front->children.push_back(child);
            pendingNodes.push(child);
        }
    }

    return root;
}

// craete a pair class pair 
class pairr
{
  public:
    TreeNode<int>* first;
    TreeNode<int>* second;
    pairr(TreeNode<int>* root)
    {
       first=root;
        second=NULL;
    }
};

// function to return node Secondlargestelement in tree 
void doit(TreeNode<int>* root,pairr &p){
    int rootData=root->data;
    int max=p.first->data;
  
    if(p.second==NULL){
      if(rootData==max){
        //Discard
      }
      else if(rootData>max){
        p.second=p.first;
        p.first=root;
      }
      else{
        p.second=root;
      }
    }
    //Other wise
    else{
      if(rootData==max){
        //Discard
      }
      else if(rootData>max){
        p.second=p.first;
        p.first=root;
      }
      else if(rootData==p.second->data){
        //discard
      }
      else if(rootData>p.second->data){
        p.second=root;
      }
    }
    for(int i=0;i<root->children.size();i++){
        doit(root->children[i],p);
    }
}
TreeNode<int>* getSecondLargestNode(TreeNode<int>* root) {
    // Write your code here
    pairr p(root);
    doit(root,p);
    return p.second;
}

int main() {
    TreeNode<int>* root = takeInputLevelWise();

    TreeNode<int>* ans = getSecondLargestNode(root);

    if (ans != NULL) {
        cout << ans->data;
    } else {
        cout << INT_MIN;
    }

}
